// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `csi.proto`

//! Generated by "C:\\phf\\workspace\\security-compute\\code6\\kata-containers\\src\\libs\\protocols\\build.rs" ("build_script_build")

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
// @@protoc_insertion_point(message:grpc.VolumeStatsResponse)
#[cfg_attr(feature = "with-serde", serde(default))]
pub struct VolumeStatsResponse {
    // message fields
    // @@protoc_insertion_point(field:grpc.VolumeStatsResponse.usage)
    pub usage: ::std::vec::Vec<VolumeUsage>,
    #[cfg_attr(feature = "with-serde", serde(serialize_with = "crate::serialize_message_field", deserialize_with = "crate::deserialize_message_field"))]
    // @@protoc_insertion_point(field:grpc.VolumeStatsResponse.volume_condition)
    pub volume_condition: ::protobuf::MessageField<VolumeCondition>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    // @@protoc_insertion_point(special_field:grpc.VolumeStatsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a VolumeStatsResponse {
    fn default() -> &'a VolumeStatsResponse {
        <VolumeStatsResponse as ::protobuf::Message>::default_instance()
    }
}

impl VolumeStatsResponse {
    pub fn new() -> VolumeStatsResponse {
        ::std::default::Default::default()
    }

    // repeated .grpc.VolumeUsage usage = 1;

    pub fn usage(&self) -> &[VolumeUsage] {
        &self.usage
    }

    pub fn clear_usage(&mut self) {
        self.usage.clear();
    }

    // Param is passed by value, moved
    pub fn set_usage(&mut self, v: ::std::vec::Vec<VolumeUsage>) {
        self.usage = v;
    }

    // Mutable pointer to the field.
    pub fn mut_usage(&mut self) -> &mut ::std::vec::Vec<VolumeUsage> {
        &mut self.usage
    }

    // Take field
    pub fn take_usage(&mut self) -> ::std::vec::Vec<VolumeUsage> {
        ::std::mem::replace(&mut self.usage, ::std::vec::Vec::new())
    }

    // .grpc.VolumeCondition volume_condition = 2;

    pub fn volume_condition(&self) -> &VolumeCondition {
        self.volume_condition.as_ref().unwrap_or_else(|| <VolumeCondition as ::protobuf::Message>::default_instance())
    }

    pub fn clear_volume_condition(&mut self) {
        self.volume_condition.clear();
    }

    pub fn has_volume_condition(&self) -> bool {
        self.volume_condition.is_some()
    }

    // Param is passed by value, moved
    pub fn set_volume_condition(&mut self, v: VolumeCondition) {
        self.volume_condition = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_volume_condition(&mut self) -> &mut VolumeCondition {
        self.volume_condition.mut_or_insert_default()
    }

    // Take field
    pub fn take_volume_condition(&mut self) -> VolumeCondition {
        self.volume_condition.take().unwrap_or_else(|| VolumeCondition::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "usage",
            |m: &VolumeStatsResponse| { &m.usage },
            |m: &mut VolumeStatsResponse| { &mut m.usage },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, VolumeCondition>(
            "volume_condition",
            |m: &VolumeStatsResponse| { &m.volume_condition },
            |m: &mut VolumeStatsResponse| { &mut m.volume_condition },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<VolumeStatsResponse>(
            "VolumeStatsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for VolumeStatsResponse {
    const NAME: &'static str = "VolumeStatsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.usage.push(is.read_message()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.volume_condition)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.usage {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.volume_condition.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.usage {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.volume_condition.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> VolumeStatsResponse {
        VolumeStatsResponse::new()
    }

    fn clear(&mut self) {
        self.usage.clear();
        self.volume_condition.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static VolumeStatsResponse {
        static instance: VolumeStatsResponse = VolumeStatsResponse {
            usage: ::std::vec::Vec::new(),
            volume_condition: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for VolumeStatsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("VolumeStatsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for VolumeStatsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VolumeStatsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
// @@protoc_insertion_point(message:grpc.VolumeUsage)
#[cfg_attr(feature = "with-serde", serde(default))]
pub struct VolumeUsage {
    // message fields
    // @@protoc_insertion_point(field:grpc.VolumeUsage.available)
    pub available: u64,
    // @@protoc_insertion_point(field:grpc.VolumeUsage.total)
    pub total: u64,
    // @@protoc_insertion_point(field:grpc.VolumeUsage.used)
    pub used: u64,
    #[cfg_attr(feature = "with-serde", serde(serialize_with = "crate::serialize_enum_or_unknown", deserialize_with = "crate::deserialize_enum_or_unknown"))]
    // @@protoc_insertion_point(field:grpc.VolumeUsage.unit)
    pub unit: ::protobuf::EnumOrUnknown<volume_usage::Unit>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    // @@protoc_insertion_point(special_field:grpc.VolumeUsage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a VolumeUsage {
    fn default() -> &'a VolumeUsage {
        <VolumeUsage as ::protobuf::Message>::default_instance()
    }
}

impl VolumeUsage {
    pub fn new() -> VolumeUsage {
        ::std::default::Default::default()
    }

    // uint64 available = 1;

    pub fn available(&self) -> u64 {
        self.available
    }

    pub fn clear_available(&mut self) {
        self.available = 0;
    }

    // Param is passed by value, moved
    pub fn set_available(&mut self, v: u64) {
        self.available = v;
    }

    // uint64 total = 2;

    pub fn total(&self) -> u64 {
        self.total
    }

    pub fn clear_total(&mut self) {
        self.total = 0;
    }

    // Param is passed by value, moved
    pub fn set_total(&mut self, v: u64) {
        self.total = v;
    }

    // uint64 used = 3;

    pub fn used(&self) -> u64 {
        self.used
    }

    pub fn clear_used(&mut self) {
        self.used = 0;
    }

    // Param is passed by value, moved
    pub fn set_used(&mut self, v: u64) {
        self.used = v;
    }

    // .grpc.VolumeUsage.Unit unit = 4;

    pub fn unit(&self) -> volume_usage::Unit {
        self.unit.enum_value_or_default()
    }

    pub fn clear_unit(&mut self) {
        self.unit = ::protobuf::EnumOrUnknown::new(volume_usage::Unit::UNKNOWN);
    }

    // Param is passed by value, moved
    pub fn set_unit(&mut self, v: volume_usage::Unit) {
        self.unit = ::protobuf::EnumOrUnknown::new(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "available",
            |m: &VolumeUsage| { &m.available },
            |m: &mut VolumeUsage| { &mut m.available },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "total",
            |m: &VolumeUsage| { &m.total },
            |m: &mut VolumeUsage| { &mut m.total },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "used",
            |m: &VolumeUsage| { &m.used },
            |m: &mut VolumeUsage| { &mut m.used },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "unit",
            |m: &VolumeUsage| { &m.unit },
            |m: &mut VolumeUsage| { &mut m.unit },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<VolumeUsage>(
            "VolumeUsage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for VolumeUsage {
    const NAME: &'static str = "VolumeUsage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.available = is.read_uint64()?;
                },
                16 => {
                    self.total = is.read_uint64()?;
                },
                24 => {
                    self.used = is.read_uint64()?;
                },
                32 => {
                    self.unit = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.available != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.available);
        }
        if self.total != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.total);
        }
        if self.used != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.used);
        }
        if self.unit != ::protobuf::EnumOrUnknown::new(volume_usage::Unit::UNKNOWN) {
            my_size += ::protobuf::rt::int32_size(4, self.unit.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.available != 0 {
            os.write_uint64(1, self.available)?;
        }
        if self.total != 0 {
            os.write_uint64(2, self.total)?;
        }
        if self.used != 0 {
            os.write_uint64(3, self.used)?;
        }
        if self.unit != ::protobuf::EnumOrUnknown::new(volume_usage::Unit::UNKNOWN) {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&self.unit))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> VolumeUsage {
        VolumeUsage::new()
    }

    fn clear(&mut self) {
        self.available = 0;
        self.total = 0;
        self.used = 0;
        self.unit = ::protobuf::EnumOrUnknown::new(volume_usage::Unit::UNKNOWN);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static VolumeUsage {
        static instance: VolumeUsage = VolumeUsage {
            available: 0,
            total: 0,
            used: 0,
            unit: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for VolumeUsage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("VolumeUsage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for VolumeUsage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VolumeUsage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `VolumeUsage`
pub mod volume_usage {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    #[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
    // @@protoc_insertion_point(enum:grpc.VolumeUsage.Unit)
    pub enum Unit {
        // @@protoc_insertion_point(enum_value:grpc.VolumeUsage.Unit.UNKNOWN)
        UNKNOWN = 0,
        // @@protoc_insertion_point(enum_value:grpc.VolumeUsage.Unit.BYTES)
        BYTES = 1,
        // @@protoc_insertion_point(enum_value:grpc.VolumeUsage.Unit.INODES)
        INODES = 2,
    }

    impl ::protobuf::Enum for Unit {
        const NAME: &'static str = "Unit";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Unit> {
            match value {
                0 => ::std::option::Option::Some(Unit::UNKNOWN),
                1 => ::std::option::Option::Some(Unit::BYTES),
                2 => ::std::option::Option::Some(Unit::INODES),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Unit] = &[
            Unit::UNKNOWN,
            Unit::BYTES,
            Unit::INODES,
        ];
    }

    impl ::protobuf::EnumFull for Unit {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("VolumeUsage.Unit").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Unit {
        fn default() -> Self {
            Unit::UNKNOWN
        }
    }

    impl Unit {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Unit>("VolumeUsage.Unit")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
// @@protoc_insertion_point(message:grpc.VolumeCondition)
#[cfg_attr(feature = "with-serde", serde(default))]
pub struct VolumeCondition {
    // message fields
    // @@protoc_insertion_point(field:grpc.VolumeCondition.abnormal)
    pub abnormal: bool,
    // @@protoc_insertion_point(field:grpc.VolumeCondition.message)
    pub message: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    // @@protoc_insertion_point(special_field:grpc.VolumeCondition.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a VolumeCondition {
    fn default() -> &'a VolumeCondition {
        <VolumeCondition as ::protobuf::Message>::default_instance()
    }
}

impl VolumeCondition {
    pub fn new() -> VolumeCondition {
        ::std::default::Default::default()
    }

    // bool abnormal = 1;

    pub fn abnormal(&self) -> bool {
        self.abnormal
    }

    pub fn clear_abnormal(&mut self) {
        self.abnormal = false;
    }

    // Param is passed by value, moved
    pub fn set_abnormal(&mut self, v: bool) {
        self.abnormal = v;
    }

    // string message = 2;

    pub fn message(&self) -> &str {
        &self.message
    }

    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "abnormal",
            |m: &VolumeCondition| { &m.abnormal },
            |m: &mut VolumeCondition| { &mut m.abnormal },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &VolumeCondition| { &m.message },
            |m: &mut VolumeCondition| { &mut m.message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<VolumeCondition>(
            "VolumeCondition",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for VolumeCondition {
    const NAME: &'static str = "VolumeCondition";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.abnormal = is.read_bool()?;
                },
                18 => {
                    self.message = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.abnormal != false {
            my_size += 1 + 1;
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.abnormal != false {
            os.write_bool(1, self.abnormal)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> VolumeCondition {
        VolumeCondition::new()
    }

    fn clear(&mut self) {
        self.abnormal = false;
        self.message.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static VolumeCondition {
        static instance: VolumeCondition = VolumeCondition {
            abnormal: false,
            message: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for VolumeCondition {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("VolumeCondition").unwrap()).clone()
    }
}

impl ::std::fmt::Display for VolumeCondition {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VolumeCondition {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\tcsi.proto\x12\x04grpc\x1a\"gogo/protobuf/gogoproto/gogo.proto\"\x80\
    \x01\n\x13VolumeStatsResponse\x12'\n\x05usage\x18\x01\x20\x03(\x0b2\x11.\
    grpc.VolumeUsageR\x05usage\x12@\n\x10volume_condition\x18\x02\x20\x01(\
    \x0b2\x15.grpc.VolumeConditionR\x0fvolumeCondition\"\xad\x01\n\x0bVolume\
    Usage\x12\x1c\n\tavailable\x18\x01\x20\x01(\x04R\tavailable\x12\x14\n\
    \x05total\x18\x02\x20\x01(\x04R\x05total\x12\x12\n\x04used\x18\x03\x20\
    \x01(\x04R\x04used\x12*\n\x04unit\x18\x04\x20\x01(\x0e2\x16.grpc.VolumeU\
    sage.UnitR\x04unit\"*\n\x04Unit\x12\x0b\n\x07UNKNOWN\x10\0\x12\t\n\x05BY\
    TES\x10\x01\x12\n\n\x06INODES\x10\x02\"G\n\x0fVolumeCondition\x12\x1a\n\
    \x08abnormal\x18\x01\x20\x01(\x08R\x08abnormal\x12\x18\n\x07message\x18\
    \x02\x20\x01(\tR\x07messageBpZ^github.com/kata-containers/kata-container\
    s/src/runtime/virtcontainers/pkg/agent/protocols/grpc\xf8\xe1\x1e\x01\
    \xa8\xe2\x1e\x01\xc0\xe2\x1e\x01\xb8\xe2\x1e\x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::gogo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(VolumeStatsResponse::generated_message_descriptor_data());
            messages.push(VolumeUsage::generated_message_descriptor_data());
            messages.push(VolumeCondition::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(volume_usage::Unit::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}