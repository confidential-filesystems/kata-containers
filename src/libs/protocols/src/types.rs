// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `types.proto`

//! Generated by "C:\\phf\\workspace\\security-compute\\code6\\kata-containers\\src\\libs\\protocols\\build.rs" ("build_script_build")

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
// @@protoc_insertion_point(message:types.IPAddress)
#[cfg_attr(feature = "with-serde", serde(default))]
pub struct IPAddress {
    // message fields
    #[cfg_attr(feature = "with-serde", serde(serialize_with = "crate::serialize_enum_or_unknown", deserialize_with = "crate::deserialize_enum_or_unknown"))]
    // @@protoc_insertion_point(field:types.IPAddress.family)
    pub family: ::protobuf::EnumOrUnknown<IPFamily>,
    // @@protoc_insertion_point(field:types.IPAddress.address)
    pub address: ::std::string::String,
    // @@protoc_insertion_point(field:types.IPAddress.mask)
    pub mask: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    // @@protoc_insertion_point(special_field:types.IPAddress.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a IPAddress {
    fn default() -> &'a IPAddress {
        <IPAddress as ::protobuf::Message>::default_instance()
    }
}

impl IPAddress {
    pub fn new() -> IPAddress {
        ::std::default::Default::default()
    }

    // .types.IPFamily family = 1;

    pub fn family(&self) -> IPFamily {
        self.family.enum_value_or_default()
    }

    pub fn clear_family(&mut self) {
        self.family = ::protobuf::EnumOrUnknown::new(IPFamily::v4);
    }

    // Param is passed by value, moved
    pub fn set_family(&mut self, v: IPFamily) {
        self.family = ::protobuf::EnumOrUnknown::new(v);
    }

    // string address = 2;

    pub fn address(&self) -> &str {
        &self.address
    }

    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address, ::std::string::String::new())
    }

    // string mask = 3;

    pub fn mask(&self) -> &str {
        &self.mask
    }

    pub fn clear_mask(&mut self) {
        self.mask.clear();
    }

    // Param is passed by value, moved
    pub fn set_mask(&mut self, v: ::std::string::String) {
        self.mask = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mask(&mut self) -> &mut ::std::string::String {
        &mut self.mask
    }

    // Take field
    pub fn take_mask(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.mask, ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "family",
            |m: &IPAddress| { &m.family },
            |m: &mut IPAddress| { &mut m.family },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "address",
            |m: &IPAddress| { &m.address },
            |m: &mut IPAddress| { &mut m.address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mask",
            |m: &IPAddress| { &m.mask },
            |m: &mut IPAddress| { &mut m.mask },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<IPAddress>(
            "IPAddress",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for IPAddress {
    const NAME: &'static str = "IPAddress";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.family = is.read_enum_or_unknown()?;
                },
                18 => {
                    self.address = is.read_string()?;
                },
                26 => {
                    self.mask = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.family != ::protobuf::EnumOrUnknown::new(IPFamily::v4) {
            my_size += ::protobuf::rt::int32_size(1, self.family.value());
        }
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.address);
        }
        if !self.mask.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.mask);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.family != ::protobuf::EnumOrUnknown::new(IPFamily::v4) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.family))?;
        }
        if !self.address.is_empty() {
            os.write_string(2, &self.address)?;
        }
        if !self.mask.is_empty() {
            os.write_string(3, &self.mask)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> IPAddress {
        IPAddress::new()
    }

    fn clear(&mut self) {
        self.family = ::protobuf::EnumOrUnknown::new(IPFamily::v4);
        self.address.clear();
        self.mask.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static IPAddress {
        static instance: IPAddress = IPAddress {
            family: ::protobuf::EnumOrUnknown::from_i32(0),
            address: ::std::string::String::new(),
            mask: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for IPAddress {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("IPAddress").unwrap()).clone()
    }
}

impl ::std::fmt::Display for IPAddress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IPAddress {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
// @@protoc_insertion_point(message:types.Interface)
#[cfg_attr(feature = "with-serde", serde(default))]
pub struct Interface {
    // message fields
    // @@protoc_insertion_point(field:types.Interface.device)
    pub device: ::std::string::String,
    // @@protoc_insertion_point(field:types.Interface.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:types.Interface.IPAddresses)
    pub IPAddresses: ::std::vec::Vec<IPAddress>,
    // @@protoc_insertion_point(field:types.Interface.mtu)
    pub mtu: u64,
    // @@protoc_insertion_point(field:types.Interface.hwAddr)
    pub hwAddr: ::std::string::String,
    // @@protoc_insertion_point(field:types.Interface.pciPath)
    pub pciPath: ::std::string::String,
    // @@protoc_insertion_point(field:types.Interface.type)
    pub type_: ::std::string::String,
    // @@protoc_insertion_point(field:types.Interface.raw_flags)
    pub raw_flags: u32,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    // @@protoc_insertion_point(special_field:types.Interface.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Interface {
    fn default() -> &'a Interface {
        <Interface as ::protobuf::Message>::default_instance()
    }
}

impl Interface {
    pub fn new() -> Interface {
        ::std::default::Default::default()
    }

    // string device = 1;

    pub fn device(&self) -> &str {
        &self.device
    }

    pub fn clear_device(&mut self) {
        self.device.clear();
    }

    // Param is passed by value, moved
    pub fn set_device(&mut self, v: ::std::string::String) {
        self.device = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device(&mut self) -> &mut ::std::string::String {
        &mut self.device
    }

    // Take field
    pub fn take_device(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.device, ::std::string::String::new())
    }

    // string name = 2;

    pub fn name(&self) -> &str {
        &self.name
    }

    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // repeated .types.IPAddress IPAddresses = 3;

    pub fn IPAddresses(&self) -> &[IPAddress] {
        &self.IPAddresses
    }

    pub fn clear_IPAddresses(&mut self) {
        self.IPAddresses.clear();
    }

    // Param is passed by value, moved
    pub fn set_IPAddresses(&mut self, v: ::std::vec::Vec<IPAddress>) {
        self.IPAddresses = v;
    }

    // Mutable pointer to the field.
    pub fn mut_IPAddresses(&mut self) -> &mut ::std::vec::Vec<IPAddress> {
        &mut self.IPAddresses
    }

    // Take field
    pub fn take_IPAddresses(&mut self) -> ::std::vec::Vec<IPAddress> {
        ::std::mem::replace(&mut self.IPAddresses, ::std::vec::Vec::new())
    }

    // uint64 mtu = 4;

    pub fn mtu(&self) -> u64 {
        self.mtu
    }

    pub fn clear_mtu(&mut self) {
        self.mtu = 0;
    }

    // Param is passed by value, moved
    pub fn set_mtu(&mut self, v: u64) {
        self.mtu = v;
    }

    // string hwAddr = 5;

    pub fn hwAddr(&self) -> &str {
        &self.hwAddr
    }

    pub fn clear_hwAddr(&mut self) {
        self.hwAddr.clear();
    }

    // Param is passed by value, moved
    pub fn set_hwAddr(&mut self, v: ::std::string::String) {
        self.hwAddr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hwAddr(&mut self) -> &mut ::std::string::String {
        &mut self.hwAddr
    }

    // Take field
    pub fn take_hwAddr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.hwAddr, ::std::string::String::new())
    }

    // string pciPath = 6;

    pub fn pciPath(&self) -> &str {
        &self.pciPath
    }

    pub fn clear_pciPath(&mut self) {
        self.pciPath.clear();
    }

    // Param is passed by value, moved
    pub fn set_pciPath(&mut self, v: ::std::string::String) {
        self.pciPath = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pciPath(&mut self) -> &mut ::std::string::String {
        &mut self.pciPath
    }

    // Take field
    pub fn take_pciPath(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pciPath, ::std::string::String::new())
    }

    // string type = 7;

    pub fn type_(&self) -> &str {
        &self.type_
    }

    pub fn clear_type_(&mut self) {
        self.type_.clear();
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: ::std::string::String) {
        self.type_ = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_type(&mut self) -> &mut ::std::string::String {
        &mut self.type_
    }

    // Take field
    pub fn take_type_(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.type_, ::std::string::String::new())
    }

    // uint32 raw_flags = 8;

    pub fn raw_flags(&self) -> u32 {
        self.raw_flags
    }

    pub fn clear_raw_flags(&mut self) {
        self.raw_flags = 0;
    }

    // Param is passed by value, moved
    pub fn set_raw_flags(&mut self, v: u32) {
        self.raw_flags = v;
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "device",
            |m: &Interface| { &m.device },
            |m: &mut Interface| { &mut m.device },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Interface| { &m.name },
            |m: &mut Interface| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "IPAddresses",
            |m: &Interface| { &m.IPAddresses },
            |m: &mut Interface| { &mut m.IPAddresses },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mtu",
            |m: &Interface| { &m.mtu },
            |m: &mut Interface| { &mut m.mtu },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hwAddr",
            |m: &Interface| { &m.hwAddr },
            |m: &mut Interface| { &mut m.hwAddr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pciPath",
            |m: &Interface| { &m.pciPath },
            |m: &mut Interface| { &mut m.pciPath },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &Interface| { &m.type_ },
            |m: &mut Interface| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "raw_flags",
            |m: &Interface| { &m.raw_flags },
            |m: &mut Interface| { &mut m.raw_flags },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Interface>(
            "Interface",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Interface {
    const NAME: &'static str = "Interface";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.device = is.read_string()?;
                },
                18 => {
                    self.name = is.read_string()?;
                },
                26 => {
                    self.IPAddresses.push(is.read_message()?);
                },
                32 => {
                    self.mtu = is.read_uint64()?;
                },
                42 => {
                    self.hwAddr = is.read_string()?;
                },
                50 => {
                    self.pciPath = is.read_string()?;
                },
                58 => {
                    self.type_ = is.read_string()?;
                },
                64 => {
                    self.raw_flags = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.device.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.device);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        for value in &self.IPAddresses {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.mtu != 0 {
            my_size += ::protobuf::rt::uint64_size(4, self.mtu);
        }
        if !self.hwAddr.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.hwAddr);
        }
        if !self.pciPath.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.pciPath);
        }
        if !self.type_.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.type_);
        }
        if self.raw_flags != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.raw_flags);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.device.is_empty() {
            os.write_string(1, &self.device)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        for v in &self.IPAddresses {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if self.mtu != 0 {
            os.write_uint64(4, self.mtu)?;
        }
        if !self.hwAddr.is_empty() {
            os.write_string(5, &self.hwAddr)?;
        }
        if !self.pciPath.is_empty() {
            os.write_string(6, &self.pciPath)?;
        }
        if !self.type_.is_empty() {
            os.write_string(7, &self.type_)?;
        }
        if self.raw_flags != 0 {
            os.write_uint32(8, self.raw_flags)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Interface {
        Interface::new()
    }

    fn clear(&mut self) {
        self.device.clear();
        self.name.clear();
        self.IPAddresses.clear();
        self.mtu = 0;
        self.hwAddr.clear();
        self.pciPath.clear();
        self.type_.clear();
        self.raw_flags = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Interface {
        static instance: Interface = Interface {
            device: ::std::string::String::new(),
            name: ::std::string::String::new(),
            IPAddresses: ::std::vec::Vec::new(),
            mtu: 0,
            hwAddr: ::std::string::String::new(),
            pciPath: ::std::string::String::new(),
            type_: ::std::string::String::new(),
            raw_flags: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Interface {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Interface").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Interface {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Interface {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
// @@protoc_insertion_point(message:types.Route)
#[cfg_attr(feature = "with-serde", serde(default))]
pub struct Route {
    // message fields
    // @@protoc_insertion_point(field:types.Route.dest)
    pub dest: ::std::string::String,
    // @@protoc_insertion_point(field:types.Route.gateway)
    pub gateway: ::std::string::String,
    // @@protoc_insertion_point(field:types.Route.device)
    pub device: ::std::string::String,
    // @@protoc_insertion_point(field:types.Route.source)
    pub source: ::std::string::String,
    // @@protoc_insertion_point(field:types.Route.scope)
    pub scope: u32,
    #[cfg_attr(feature = "with-serde", serde(serialize_with = "crate::serialize_enum_or_unknown", deserialize_with = "crate::deserialize_enum_or_unknown"))]
    // @@protoc_insertion_point(field:types.Route.family)
    pub family: ::protobuf::EnumOrUnknown<IPFamily>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    // @@protoc_insertion_point(special_field:types.Route.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Route {
    fn default() -> &'a Route {
        <Route as ::protobuf::Message>::default_instance()
    }
}

impl Route {
    pub fn new() -> Route {
        ::std::default::Default::default()
    }

    // string dest = 1;

    pub fn dest(&self) -> &str {
        &self.dest
    }

    pub fn clear_dest(&mut self) {
        self.dest.clear();
    }

    // Param is passed by value, moved
    pub fn set_dest(&mut self, v: ::std::string::String) {
        self.dest = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dest(&mut self) -> &mut ::std::string::String {
        &mut self.dest
    }

    // Take field
    pub fn take_dest(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.dest, ::std::string::String::new())
    }

    // string gateway = 2;

    pub fn gateway(&self) -> &str {
        &self.gateway
    }

    pub fn clear_gateway(&mut self) {
        self.gateway.clear();
    }

    // Param is passed by value, moved
    pub fn set_gateway(&mut self, v: ::std::string::String) {
        self.gateway = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gateway(&mut self) -> &mut ::std::string::String {
        &mut self.gateway
    }

    // Take field
    pub fn take_gateway(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gateway, ::std::string::String::new())
    }

    // string device = 3;

    pub fn device(&self) -> &str {
        &self.device
    }

    pub fn clear_device(&mut self) {
        self.device.clear();
    }

    // Param is passed by value, moved
    pub fn set_device(&mut self, v: ::std::string::String) {
        self.device = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device(&mut self) -> &mut ::std::string::String {
        &mut self.device
    }

    // Take field
    pub fn take_device(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.device, ::std::string::String::new())
    }

    // string source = 4;

    pub fn source(&self) -> &str {
        &self.source
    }

    pub fn clear_source(&mut self) {
        self.source.clear();
    }

    // Param is passed by value, moved
    pub fn set_source(&mut self, v: ::std::string::String) {
        self.source = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source(&mut self) -> &mut ::std::string::String {
        &mut self.source
    }

    // Take field
    pub fn take_source(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.source, ::std::string::String::new())
    }

    // uint32 scope = 5;

    pub fn scope(&self) -> u32 {
        self.scope
    }

    pub fn clear_scope(&mut self) {
        self.scope = 0;
    }

    // Param is passed by value, moved
    pub fn set_scope(&mut self, v: u32) {
        self.scope = v;
    }

    // .types.IPFamily family = 6;

    pub fn family(&self) -> IPFamily {
        self.family.enum_value_or_default()
    }

    pub fn clear_family(&mut self) {
        self.family = ::protobuf::EnumOrUnknown::new(IPFamily::v4);
    }

    // Param is passed by value, moved
    pub fn set_family(&mut self, v: IPFamily) {
        self.family = ::protobuf::EnumOrUnknown::new(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "dest",
            |m: &Route| { &m.dest },
            |m: &mut Route| { &mut m.dest },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gateway",
            |m: &Route| { &m.gateway },
            |m: &mut Route| { &mut m.gateway },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "device",
            |m: &Route| { &m.device },
            |m: &mut Route| { &mut m.device },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "source",
            |m: &Route| { &m.source },
            |m: &mut Route| { &mut m.source },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "scope",
            |m: &Route| { &m.scope },
            |m: &mut Route| { &mut m.scope },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "family",
            |m: &Route| { &m.family },
            |m: &mut Route| { &mut m.family },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Route>(
            "Route",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Route {
    const NAME: &'static str = "Route";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.dest = is.read_string()?;
                },
                18 => {
                    self.gateway = is.read_string()?;
                },
                26 => {
                    self.device = is.read_string()?;
                },
                34 => {
                    self.source = is.read_string()?;
                },
                40 => {
                    self.scope = is.read_uint32()?;
                },
                48 => {
                    self.family = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.dest.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.dest);
        }
        if !self.gateway.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.gateway);
        }
        if !self.device.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.device);
        }
        if !self.source.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.source);
        }
        if self.scope != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.scope);
        }
        if self.family != ::protobuf::EnumOrUnknown::new(IPFamily::v4) {
            my_size += ::protobuf::rt::int32_size(6, self.family.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.dest.is_empty() {
            os.write_string(1, &self.dest)?;
        }
        if !self.gateway.is_empty() {
            os.write_string(2, &self.gateway)?;
        }
        if !self.device.is_empty() {
            os.write_string(3, &self.device)?;
        }
        if !self.source.is_empty() {
            os.write_string(4, &self.source)?;
        }
        if self.scope != 0 {
            os.write_uint32(5, self.scope)?;
        }
        if self.family != ::protobuf::EnumOrUnknown::new(IPFamily::v4) {
            os.write_enum(6, ::protobuf::EnumOrUnknown::value(&self.family))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Route {
        Route::new()
    }

    fn clear(&mut self) {
        self.dest.clear();
        self.gateway.clear();
        self.device.clear();
        self.source.clear();
        self.scope = 0;
        self.family = ::protobuf::EnumOrUnknown::new(IPFamily::v4);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Route {
        static instance: Route = Route {
            dest: ::std::string::String::new(),
            gateway: ::std::string::String::new(),
            device: ::std::string::String::new(),
            source: ::std::string::String::new(),
            scope: 0,
            family: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Route {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Route").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Route {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Route {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
// @@protoc_insertion_point(message:types.ARPNeighbor)
#[cfg_attr(feature = "with-serde", serde(default))]
pub struct ARPNeighbor {
    // message fields
    #[cfg_attr(feature = "with-serde", serde(serialize_with = "crate::serialize_message_field", deserialize_with = "crate::deserialize_message_field"))]
    // @@protoc_insertion_point(field:types.ARPNeighbor.toIPAddress)
    pub toIPAddress: ::protobuf::MessageField<IPAddress>,
    // @@protoc_insertion_point(field:types.ARPNeighbor.device)
    pub device: ::std::string::String,
    // @@protoc_insertion_point(field:types.ARPNeighbor.lladdr)
    pub lladdr: ::std::string::String,
    // @@protoc_insertion_point(field:types.ARPNeighbor.state)
    pub state: i32,
    // @@protoc_insertion_point(field:types.ARPNeighbor.flags)
    pub flags: i32,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    // @@protoc_insertion_point(special_field:types.ARPNeighbor.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ARPNeighbor {
    fn default() -> &'a ARPNeighbor {
        <ARPNeighbor as ::protobuf::Message>::default_instance()
    }
}

impl ARPNeighbor {
    pub fn new() -> ARPNeighbor {
        ::std::default::Default::default()
    }

    // .types.IPAddress toIPAddress = 1;

    pub fn toIPAddress(&self) -> &IPAddress {
        self.toIPAddress.as_ref().unwrap_or_else(|| <IPAddress as ::protobuf::Message>::default_instance())
    }

    pub fn clear_toIPAddress(&mut self) {
        self.toIPAddress.clear();
    }

    pub fn has_toIPAddress(&self) -> bool {
        self.toIPAddress.is_some()
    }

    // Param is passed by value, moved
    pub fn set_toIPAddress(&mut self, v: IPAddress) {
        self.toIPAddress = ::protobuf::MessageField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_toIPAddress(&mut self) -> &mut IPAddress {
        self.toIPAddress.mut_or_insert_default()
    }

    // Take field
    pub fn take_toIPAddress(&mut self) -> IPAddress {
        self.toIPAddress.take().unwrap_or_else(|| IPAddress::new())
    }

    // string device = 2;

    pub fn device(&self) -> &str {
        &self.device
    }

    pub fn clear_device(&mut self) {
        self.device.clear();
    }

    // Param is passed by value, moved
    pub fn set_device(&mut self, v: ::std::string::String) {
        self.device = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device(&mut self) -> &mut ::std::string::String {
        &mut self.device
    }

    // Take field
    pub fn take_device(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.device, ::std::string::String::new())
    }

    // string lladdr = 3;

    pub fn lladdr(&self) -> &str {
        &self.lladdr
    }

    pub fn clear_lladdr(&mut self) {
        self.lladdr.clear();
    }

    // Param is passed by value, moved
    pub fn set_lladdr(&mut self, v: ::std::string::String) {
        self.lladdr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lladdr(&mut self) -> &mut ::std::string::String {
        &mut self.lladdr
    }

    // Take field
    pub fn take_lladdr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.lladdr, ::std::string::String::new())
    }

    // int32 state = 4;

    pub fn state(&self) -> i32 {
        self.state
    }

    pub fn clear_state(&mut self) {
        self.state = 0;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: i32) {
        self.state = v;
    }

    // int32 flags = 5;

    pub fn flags(&self) -> i32 {
        self.flags
    }

    pub fn clear_flags(&mut self) {
        self.flags = 0;
    }

    // Param is passed by value, moved
    pub fn set_flags(&mut self, v: i32) {
        self.flags = v;
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, IPAddress>(
            "toIPAddress",
            |m: &ARPNeighbor| { &m.toIPAddress },
            |m: &mut ARPNeighbor| { &mut m.toIPAddress },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "device",
            |m: &ARPNeighbor| { &m.device },
            |m: &mut ARPNeighbor| { &mut m.device },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "lladdr",
            |m: &ARPNeighbor| { &m.lladdr },
            |m: &mut ARPNeighbor| { &mut m.lladdr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "state",
            |m: &ARPNeighbor| { &m.state },
            |m: &mut ARPNeighbor| { &mut m.state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "flags",
            |m: &ARPNeighbor| { &m.flags },
            |m: &mut ARPNeighbor| { &mut m.flags },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ARPNeighbor>(
            "ARPNeighbor",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ARPNeighbor {
    const NAME: &'static str = "ARPNeighbor";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.toIPAddress)?;
                },
                18 => {
                    self.device = is.read_string()?;
                },
                26 => {
                    self.lladdr = is.read_string()?;
                },
                32 => {
                    self.state = is.read_int32()?;
                },
                40 => {
                    self.flags = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.toIPAddress.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.device.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.device);
        }
        if !self.lladdr.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.lladdr);
        }
        if self.state != 0 {
            my_size += ::protobuf::rt::int32_size(4, self.state);
        }
        if self.flags != 0 {
            my_size += ::protobuf::rt::int32_size(5, self.flags);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.toIPAddress.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.device.is_empty() {
            os.write_string(2, &self.device)?;
        }
        if !self.lladdr.is_empty() {
            os.write_string(3, &self.lladdr)?;
        }
        if self.state != 0 {
            os.write_int32(4, self.state)?;
        }
        if self.flags != 0 {
            os.write_int32(5, self.flags)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ARPNeighbor {
        ARPNeighbor::new()
    }

    fn clear(&mut self) {
        self.toIPAddress.clear();
        self.device.clear();
        self.lladdr.clear();
        self.state = 0;
        self.flags = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ARPNeighbor {
        static instance: ARPNeighbor = ARPNeighbor {
            toIPAddress: ::protobuf::MessageField::none(),
            device: ::std::string::String::new(),
            lladdr: ::std::string::String::new(),
            state: 0,
            flags: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ARPNeighbor {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ARPNeighbor").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ARPNeighbor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ARPNeighbor {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
// @@protoc_insertion_point(enum:types.IPFamily)
pub enum IPFamily {
    // @@protoc_insertion_point(enum_value:types.IPFamily.v4)
    v4 = 0,
    // @@protoc_insertion_point(enum_value:types.IPFamily.v6)
    v6 = 1,
}

impl ::protobuf::Enum for IPFamily {
    const NAME: &'static str = "IPFamily";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<IPFamily> {
        match value {
            0 => ::std::option::Option::Some(IPFamily::v4),
            1 => ::std::option::Option::Some(IPFamily::v6),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [IPFamily] = &[
        IPFamily::v4,
        IPFamily::v6,
    ];
}

impl ::protobuf::EnumFull for IPFamily {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("IPFamily").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for IPFamily {
    fn default() -> Self {
        IPFamily::v4
    }
}

impl IPFamily {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<IPFamily>("IPFamily")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
// @@protoc_insertion_point(enum:types.FSGroupChangePolicy)
pub enum FSGroupChangePolicy {
    // @@protoc_insertion_point(enum_value:types.FSGroupChangePolicy.Always)
    Always = 0,
    // @@protoc_insertion_point(enum_value:types.FSGroupChangePolicy.OnRootMismatch)
    OnRootMismatch = 1,
}

impl ::protobuf::Enum for FSGroupChangePolicy {
    const NAME: &'static str = "FSGroupChangePolicy";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<FSGroupChangePolicy> {
        match value {
            0 => ::std::option::Option::Some(FSGroupChangePolicy::Always),
            1 => ::std::option::Option::Some(FSGroupChangePolicy::OnRootMismatch),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [FSGroupChangePolicy] = &[
        FSGroupChangePolicy::Always,
        FSGroupChangePolicy::OnRootMismatch,
    ];
}

impl ::protobuf::EnumFull for FSGroupChangePolicy {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("FSGroupChangePolicy").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for FSGroupChangePolicy {
    fn default() -> Self {
        FSGroupChangePolicy::Always
    }
}

impl FSGroupChangePolicy {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<FSGroupChangePolicy>("FSGroupChangePolicy")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0btypes.proto\x12\x05types\"b\n\tIPAddress\x12'\n\x06family\x18\x01\
    \x20\x01(\x0e2\x0f.types.IPFamilyR\x06family\x12\x18\n\x07address\x18\
    \x02\x20\x01(\tR\x07address\x12\x12\n\x04mask\x18\x03\x20\x01(\tR\x04mas\
    k\"\xe0\x01\n\tInterface\x12\x16\n\x06device\x18\x01\x20\x01(\tR\x06devi\
    ce\x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04name\x122\n\x0bIPAddresses\
    \x18\x03\x20\x03(\x0b2\x10.types.IPAddressR\x0bIPAddresses\x12\x10\n\x03\
    mtu\x18\x04\x20\x01(\x04R\x03mtu\x12\x16\n\x06hwAddr\x18\x05\x20\x01(\tR\
    \x06hwAddr\x12\x18\n\x07pciPath\x18\x06\x20\x01(\tR\x07pciPath\x12\x12\n\
    \x04type\x18\x07\x20\x01(\tR\x04type\x12\x1b\n\traw_flags\x18\x08\x20\
    \x01(\rR\x08rawFlags\"\xa4\x01\n\x05Route\x12\x12\n\x04dest\x18\x01\x20\
    \x01(\tR\x04dest\x12\x18\n\x07gateway\x18\x02\x20\x01(\tR\x07gateway\x12\
    \x16\n\x06device\x18\x03\x20\x01(\tR\x06device\x12\x16\n\x06source\x18\
    \x04\x20\x01(\tR\x06source\x12\x14\n\x05scope\x18\x05\x20\x01(\rR\x05sco\
    pe\x12'\n\x06family\x18\x06\x20\x01(\x0e2\x0f.types.IPFamilyR\x06family\
    \"\x9d\x01\n\x0bARPNeighbor\x122\n\x0btoIPAddress\x18\x01\x20\x01(\x0b2\
    \x10.types.IPAddressR\x0btoIPAddress\x12\x16\n\x06device\x18\x02\x20\x01\
    (\tR\x06device\x12\x16\n\x06lladdr\x18\x03\x20\x01(\tR\x06lladdr\x12\x14\
    \n\x05state\x18\x04\x20\x01(\x05R\x05state\x12\x14\n\x05flags\x18\x05\
    \x20\x01(\x05R\x05flags*\x1a\n\x08IPFamily\x12\x06\n\x02v4\x10\0\x12\x06\
    \n\x02v6\x10\x01*5\n\x13FSGroupChangePolicy\x12\n\n\x06Always\x10\0\x12\
    \x12\n\x0eOnRootMismatch\x10\x01B[ZYgithub.com/kata-containers/kata-cont\
    ainers/src/runtime/virtcontainers/pkg/agent/protocolsb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(IPAddress::generated_message_descriptor_data());
            messages.push(Interface::generated_message_descriptor_data());
            messages.push(Route::generated_message_descriptor_data());
            messages.push(ARPNeighbor::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(IPFamily::generated_enum_descriptor_data());
            enums.push(FSGroupChangePolicy::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}