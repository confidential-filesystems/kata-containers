// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `health.proto`

//! Generated by "C:\\phf\\workspace\\security-compute\\code6\\kata-containers\\src\\libs\\protocols\\build.rs" ("build_script_build")

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
// @@protoc_insertion_point(message:grpc.CheckRequest)
#[cfg_attr(feature = "with-serde", serde(default))]
pub struct CheckRequest {
    // message fields
    // @@protoc_insertion_point(field:grpc.CheckRequest.service)
    pub service: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    // @@protoc_insertion_point(special_field:grpc.CheckRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CheckRequest {
    fn default() -> &'a CheckRequest {
        <CheckRequest as ::protobuf::Message>::default_instance()
    }
}

impl CheckRequest {
    pub fn new() -> CheckRequest {
        ::std::default::Default::default()
    }

    // string service = 1;

    pub fn service(&self) -> &str {
        &self.service
    }

    pub fn clear_service(&mut self) {
        self.service.clear();
    }

    // Param is passed by value, moved
    pub fn set_service(&mut self, v: ::std::string::String) {
        self.service = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service(&mut self) -> &mut ::std::string::String {
        &mut self.service
    }

    // Take field
    pub fn take_service(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.service, ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "service",
            |m: &CheckRequest| { &m.service },
            |m: &mut CheckRequest| { &mut m.service },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CheckRequest>(
            "CheckRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CheckRequest {
    const NAME: &'static str = "CheckRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.service = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.service.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.service);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.service.is_empty() {
            os.write_string(1, &self.service)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CheckRequest {
        CheckRequest::new()
    }

    fn clear(&mut self) {
        self.service.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CheckRequest {
        static instance: CheckRequest = CheckRequest {
            service: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CheckRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CheckRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CheckRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CheckRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
// @@protoc_insertion_point(message:grpc.HealthCheckResponse)
#[cfg_attr(feature = "with-serde", serde(default))]
pub struct HealthCheckResponse {
    // message fields
    #[cfg_attr(feature = "with-serde", serde(serialize_with = "crate::serialize_enum_or_unknown", deserialize_with = "crate::deserialize_enum_or_unknown"))]
    // @@protoc_insertion_point(field:grpc.HealthCheckResponse.status)
    pub status: ::protobuf::EnumOrUnknown<health_check_response::ServingStatus>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    // @@protoc_insertion_point(special_field:grpc.HealthCheckResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HealthCheckResponse {
    fn default() -> &'a HealthCheckResponse {
        <HealthCheckResponse as ::protobuf::Message>::default_instance()
    }
}

impl HealthCheckResponse {
    pub fn new() -> HealthCheckResponse {
        ::std::default::Default::default()
    }

    // .grpc.HealthCheckResponse.ServingStatus status = 1;

    pub fn status(&self) -> health_check_response::ServingStatus {
        self.status.enum_value_or_default()
    }

    pub fn clear_status(&mut self) {
        self.status = ::protobuf::EnumOrUnknown::new(health_check_response::ServingStatus::UNKNOWN);
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: health_check_response::ServingStatus) {
        self.status = ::protobuf::EnumOrUnknown::new(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &HealthCheckResponse| { &m.status },
            |m: &mut HealthCheckResponse| { &mut m.status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HealthCheckResponse>(
            "HealthCheckResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HealthCheckResponse {
    const NAME: &'static str = "HealthCheckResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.status = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.status != ::protobuf::EnumOrUnknown::new(health_check_response::ServingStatus::UNKNOWN) {
            my_size += ::protobuf::rt::int32_size(1, self.status.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.status != ::protobuf::EnumOrUnknown::new(health_check_response::ServingStatus::UNKNOWN) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.status))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HealthCheckResponse {
        HealthCheckResponse::new()
    }

    fn clear(&mut self) {
        self.status = ::protobuf::EnumOrUnknown::new(health_check_response::ServingStatus::UNKNOWN);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HealthCheckResponse {
        static instance: HealthCheckResponse = HealthCheckResponse {
            status: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HealthCheckResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HealthCheckResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HealthCheckResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HealthCheckResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `HealthCheckResponse`
pub mod health_check_response {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    #[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
    // @@protoc_insertion_point(enum:grpc.HealthCheckResponse.ServingStatus)
    pub enum ServingStatus {
        // @@protoc_insertion_point(enum_value:grpc.HealthCheckResponse.ServingStatus.UNKNOWN)
        UNKNOWN = 0,
        // @@protoc_insertion_point(enum_value:grpc.HealthCheckResponse.ServingStatus.SERVING)
        SERVING = 1,
        // @@protoc_insertion_point(enum_value:grpc.HealthCheckResponse.ServingStatus.NOT_SERVING)
        NOT_SERVING = 2,
    }

    impl ::protobuf::Enum for ServingStatus {
        const NAME: &'static str = "ServingStatus";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<ServingStatus> {
            match value {
                0 => ::std::option::Option::Some(ServingStatus::UNKNOWN),
                1 => ::std::option::Option::Some(ServingStatus::SERVING),
                2 => ::std::option::Option::Some(ServingStatus::NOT_SERVING),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [ServingStatus] = &[
            ServingStatus::UNKNOWN,
            ServingStatus::SERVING,
            ServingStatus::NOT_SERVING,
        ];
    }

    impl ::protobuf::EnumFull for ServingStatus {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("HealthCheckResponse.ServingStatus").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for ServingStatus {
        fn default() -> Self {
            ServingStatus::UNKNOWN
        }
    }

    impl ServingStatus {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ServingStatus>("HealthCheckResponse.ServingStatus")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
// @@protoc_insertion_point(message:grpc.VersionCheckResponse)
#[cfg_attr(feature = "with-serde", serde(default))]
pub struct VersionCheckResponse {
    // message fields
    // @@protoc_insertion_point(field:grpc.VersionCheckResponse.grpc_version)
    pub grpc_version: ::std::string::String,
    // @@protoc_insertion_point(field:grpc.VersionCheckResponse.agent_version)
    pub agent_version: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    // @@protoc_insertion_point(special_field:grpc.VersionCheckResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a VersionCheckResponse {
    fn default() -> &'a VersionCheckResponse {
        <VersionCheckResponse as ::protobuf::Message>::default_instance()
    }
}

impl VersionCheckResponse {
    pub fn new() -> VersionCheckResponse {
        ::std::default::Default::default()
    }

    // string grpc_version = 1;

    pub fn grpc_version(&self) -> &str {
        &self.grpc_version
    }

    pub fn clear_grpc_version(&mut self) {
        self.grpc_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_grpc_version(&mut self, v: ::std::string::String) {
        self.grpc_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_grpc_version(&mut self) -> &mut ::std::string::String {
        &mut self.grpc_version
    }

    // Take field
    pub fn take_grpc_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.grpc_version, ::std::string::String::new())
    }

    // string agent_version = 2;

    pub fn agent_version(&self) -> &str {
        &self.agent_version
    }

    pub fn clear_agent_version(&mut self) {
        self.agent_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_agent_version(&mut self, v: ::std::string::String) {
        self.agent_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_agent_version(&mut self) -> &mut ::std::string::String {
        &mut self.agent_version
    }

    // Take field
    pub fn take_agent_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.agent_version, ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "grpc_version",
            |m: &VersionCheckResponse| { &m.grpc_version },
            |m: &mut VersionCheckResponse| { &mut m.grpc_version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "agent_version",
            |m: &VersionCheckResponse| { &m.agent_version },
            |m: &mut VersionCheckResponse| { &mut m.agent_version },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<VersionCheckResponse>(
            "VersionCheckResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for VersionCheckResponse {
    const NAME: &'static str = "VersionCheckResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.grpc_version = is.read_string()?;
                },
                18 => {
                    self.agent_version = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.grpc_version.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.grpc_version);
        }
        if !self.agent_version.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.agent_version);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.grpc_version.is_empty() {
            os.write_string(1, &self.grpc_version)?;
        }
        if !self.agent_version.is_empty() {
            os.write_string(2, &self.agent_version)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> VersionCheckResponse {
        VersionCheckResponse::new()
    }

    fn clear(&mut self) {
        self.grpc_version.clear();
        self.agent_version.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static VersionCheckResponse {
        static instance: VersionCheckResponse = VersionCheckResponse {
            grpc_version: ::std::string::String::new(),
            agent_version: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for VersionCheckResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("VersionCheckResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for VersionCheckResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VersionCheckResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0chealth.proto\x12\x04grpc\x1a\"gogo/protobuf/gogoproto/gogo.proto\"\
    (\n\x0cCheckRequest\x12\x18\n\x07service\x18\x01\x20\x01(\tR\x07service\
    \"\x92\x01\n\x13HealthCheckResponse\x12?\n\x06status\x18\x01\x20\x01(\
    \x0e2'.grpc.HealthCheckResponse.ServingStatusR\x06status\":\n\rServingSt\
    atus\x12\x0b\n\x07UNKNOWN\x10\0\x12\x0b\n\x07SERVING\x10\x01\x12\x0f\n\
    \x0bNOT_SERVING\x10\x02\"^\n\x14VersionCheckResponse\x12!\n\x0cgrpc_vers\
    ion\x18\x01\x20\x01(\tR\x0bgrpcVersion\x12#\n\ragent_version\x18\x02\x20\
    \x01(\tR\x0cagentVersion2{\n\x06Health\x126\n\x05Check\x12\x12.grpc.Chec\
    kRequest\x1a\x19.grpc.HealthCheckResponse\x129\n\x07Version\x12\x12.grpc\
    .CheckRequest\x1a\x1a.grpc.VersionCheckResponseBpZ^github.com/kata-conta\
    iners/kata-containers/src/runtime/virtcontainers/pkg/agent/protocols/grp\
    c\xf8\xe1\x1e\x01\xa8\xe2\x1e\x01\xc0\xe2\x1e\x01\xb8\xe2\x1e\x01b\x06pr\
    oto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::gogo::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(CheckRequest::generated_message_descriptor_data());
            messages.push(HealthCheckResponse::generated_message_descriptor_data());
            messages.push(VersionCheckResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(health_check_response::ServingStatus::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}