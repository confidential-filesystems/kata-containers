// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `image.proto`

//! Generated by "C:\\phf\\workspace\\security-compute\\code5\\kata-containers\\src\\libs\\protocols\\build.rs" ("build_script_build")

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
// @@protoc_insertion_point(message:grpc.PullImageRequest)
#[cfg_attr(feature = "with-serde", serde(default))]
pub struct PullImageRequest {
    // message fields
    // @@protoc_insertion_point(field:grpc.PullImageRequest.image)
    pub image: ::std::string::String,
    // @@protoc_insertion_point(field:grpc.PullImageRequest.container_id)
    pub container_id: ::std::string::String,
    // @@protoc_insertion_point(field:grpc.PullImageRequest.source_creds)
    pub source_creds: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    // @@protoc_insertion_point(special_field:grpc.PullImageRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PullImageRequest {
    fn default() -> &'a PullImageRequest {
        <PullImageRequest as ::protobuf::Message>::default_instance()
    }
}

impl PullImageRequest {
    pub fn new() -> PullImageRequest {
        ::std::default::Default::default()
    }

    // string image = 1;

    pub fn image(&self) -> &str {
        &self.image
    }

    pub fn clear_image(&mut self) {
        self.image.clear();
    }

    // Param is passed by value, moved
    pub fn set_image(&mut self, v: ::std::string::String) {
        self.image = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_image(&mut self) -> &mut ::std::string::String {
        &mut self.image
    }

    // Take field
    pub fn take_image(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.image, ::std::string::String::new())
    }

    // string container_id = 2;

    pub fn container_id(&self) -> &str {
        &self.container_id
    }

    pub fn clear_container_id(&mut self) {
        self.container_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_container_id(&mut self, v: ::std::string::String) {
        self.container_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_container_id(&mut self) -> &mut ::std::string::String {
        &mut self.container_id
    }

    // Take field
    pub fn take_container_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.container_id, ::std::string::String::new())
    }

    // string source_creds = 3;

    pub fn source_creds(&self) -> &str {
        &self.source_creds
    }

    pub fn clear_source_creds(&mut self) {
        self.source_creds.clear();
    }

    // Param is passed by value, moved
    pub fn set_source_creds(&mut self, v: ::std::string::String) {
        self.source_creds = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_creds(&mut self) -> &mut ::std::string::String {
        &mut self.source_creds
    }

    // Take field
    pub fn take_source_creds(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.source_creds, ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "image",
            |m: &PullImageRequest| { &m.image },
            |m: &mut PullImageRequest| { &mut m.image },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "container_id",
            |m: &PullImageRequest| { &m.container_id },
            |m: &mut PullImageRequest| { &mut m.container_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "source_creds",
            |m: &PullImageRequest| { &m.source_creds },
            |m: &mut PullImageRequest| { &mut m.source_creds },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PullImageRequest>(
            "PullImageRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PullImageRequest {
    const NAME: &'static str = "PullImageRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.image = is.read_string()?;
                },
                18 => {
                    self.container_id = is.read_string()?;
                },
                26 => {
                    self.source_creds = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.image.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.image);
        }
        if !self.container_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.container_id);
        }
        if !self.source_creds.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.source_creds);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.image.is_empty() {
            os.write_string(1, &self.image)?;
        }
        if !self.container_id.is_empty() {
            os.write_string(2, &self.container_id)?;
        }
        if !self.source_creds.is_empty() {
            os.write_string(3, &self.source_creds)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PullImageRequest {
        PullImageRequest::new()
    }

    fn clear(&mut self) {
        self.image.clear();
        self.container_id.clear();
        self.source_creds.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PullImageRequest {
        static instance: PullImageRequest = PullImageRequest {
            image: ::std::string::String::new(),
            container_id: ::std::string::String::new(),
            source_creds: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PullImageRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PullImageRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PullImageRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PullImageRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
// @@protoc_insertion_point(message:grpc.PullImageResponse)
#[cfg_attr(feature = "with-serde", serde(default))]
pub struct PullImageResponse {
    // message fields
    // @@protoc_insertion_point(field:grpc.PullImageResponse.image_ref)
    pub image_ref: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    // @@protoc_insertion_point(special_field:grpc.PullImageResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PullImageResponse {
    fn default() -> &'a PullImageResponse {
        <PullImageResponse as ::protobuf::Message>::default_instance()
    }
}

impl PullImageResponse {
    pub fn new() -> PullImageResponse {
        ::std::default::Default::default()
    }

    // string image_ref = 1;

    pub fn image_ref(&self) -> &str {
        &self.image_ref
    }

    pub fn clear_image_ref(&mut self) {
        self.image_ref.clear();
    }

    // Param is passed by value, moved
    pub fn set_image_ref(&mut self, v: ::std::string::String) {
        self.image_ref = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_image_ref(&mut self) -> &mut ::std::string::String {
        &mut self.image_ref
    }

    // Take field
    pub fn take_image_ref(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.image_ref, ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "image_ref",
            |m: &PullImageResponse| { &m.image_ref },
            |m: &mut PullImageResponse| { &mut m.image_ref },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PullImageResponse>(
            "PullImageResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PullImageResponse {
    const NAME: &'static str = "PullImageResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.image_ref = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.image_ref.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.image_ref);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.image_ref.is_empty() {
            os.write_string(1, &self.image_ref)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PullImageResponse {
        PullImageResponse::new()
    }

    fn clear(&mut self) {
        self.image_ref.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PullImageResponse {
        static instance: PullImageResponse = PullImageResponse {
            image_ref: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PullImageResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PullImageResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PullImageResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PullImageResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0bimage.proto\x12\x04grpc\"n\n\x10PullImageRequest\x12\x14\n\x05imag\
    e\x18\x01\x20\x01(\tR\x05image\x12!\n\x0ccontainer_id\x18\x02\x20\x01(\t\
    R\x0bcontainerId\x12!\n\x0csource_creds\x18\x03\x20\x01(\tR\x0bsourceCre\
    ds\"0\n\x11PullImageResponse\x12\x1b\n\timage_ref\x18\x01\x20\x01(\tR\
    \x08imageRef2E\n\x05Image\x12<\n\tPullImage\x12\x16.grpc.PullImageReques\
    t\x1a\x17.grpc.PullImageResponseB`Z^github.com/kata-containers/kata-cont\
    ainers/src/runtime/virtcontainers/pkg/agent/protocols/grpcb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(PullImageRequest::generated_message_descriptor_data());
            messages.push(PullImageResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}